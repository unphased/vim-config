snippet lg "console.log()" !w
console.log('${VISUAL}$1:'${2:, ${VISUAL}$1});
endsnippet

snippet et "error throw" !w
err => { if (err) { throw err; } }
endsnippet

snippet m "map" !w
map(function (${1:e}) { return ${2:$1}; })
endsnippet

snippet ok "Object.keys(object).map" !w
Object.keys(${1:${VISUAL:obj}}).map(${3:k} => {
	return ${2:$1}[$3];
});
endsnippet

snippet red "reduce" !w
reduce((a, b) => { a + b }, 0)
endsnippet

snippet okr "Object.keys(object).reduce" !w
Object.keys(${VISUAL}${1:obj}).reduce((a, ${3:b}) => {
	var v = ${2:$1[$3]};
	return v;
}, ${4:{}});
endsnippet

snippet db "debugger;" !w
debugger;
endsnippet

snippet f
function ${VISUAL}$1(${2}) {
	${3}
}
endsnippet

snippet fs "require fs" !w
const fs = require('fs');
endsnippet

snippet r "return" !w
return ${1}
endsnippet

snippet s "var self" !w
var self = this;
endsnippet

snippet f, "Basic (anon) function with comma" !w
function ${3}(${1}) {
	${2}
},
endsnippet

snippet f; "Basic (anon) function with semicolon" !w
function ${3}(${1}) {
	${2}
};
endsnippet

snippet c "Callback" !w
function (${1:err}) {
${2}
})
endsnippet

snippet c; "Callback with semicolon" !w
function (${1:err}) {
${2}
});
endsnippet

snippet iferr "if error" !b
if (err) {
	${1}
}
endsnippet

snippet rerr "return if error" !b
if (err) return cb(err);
endsnippet

snippet i "console.info()" !w
console.info('${VISUAL}$1'${2:, ${VISUAL}$1});
endsnippet

snippet w "console.warn()" !b
console.warn('${VISUAL}$1'${2:, ${VISUAL}$1});
endsnippet

snippet er "console.error()" !w
console.error('${VISUAL}$1'${2:, ${VISUAL}$1});
endsnippet

snippet a "console.assert()" !w
console.assert(${VISUAL}$1, ${2:\`not ${VISUAL}$1\`});
endsnippet

snippet doc "document.getElementById()" !w
document.getElementById('$1')
endsnippet

snippet el "Create element" !w
document.createElement('${1:div}');
endsnippet

snippet i "Mocha it" !bw
it("${1}", function() {
${2}
});
endsnippet

snippet desc "Mocha describe" !b
describe("${1}", function() {
${2}
});
endsnippet

snippet mocha "Mocha globals" !b
/*global it, describe, before, beforeEach, after, afterEach */
endsnippet

snippet ifmain "if (require.main === module)" !b
if (require.main === module) {
${1}
}
endsnippet

snippet exit "process.exit(0);" !b
process.exit(${1:0});
endsnippet

snippet re "require(module)" !b
var ${1:React} = require("$2${1/(.*)/$1/}");
endsnippet

snippet remove "Remove element from array" !b
var ${3:i} = ${1:array}.indexOf(${2:value});
if (${3/(.*)/$1/} > -1) ${1/(.*)/$1/}.splice(${3/(.*)/$1/}, 1);
endsnippet

snippet ** "yuidoc comment" !b
/**
 * @${2}
 */
endsnippet

snippet t "then after a promise" !w
.then(function(${1:val}) {
${2}
})${3}
endsnippet
